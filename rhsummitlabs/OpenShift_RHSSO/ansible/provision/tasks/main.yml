---
# tasks file for provision
#
- name: check for ssh key
  stat: 
    path: ~/.ssh/{{ ssh_key }}
  register: sshkey
  tags: sshkey
- name: create ssh key if needed
  shell: ssh-keygen -f ~/.ssh/{{ ssh_key }} -N ''
  changed_when: False
  when: sshkey.stat.exists == False
  tags: sshkey
- name: upload ssh key
  ec2_key:
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    name: "{{ ssh_key }}"
    key_material: "{{ item }}"
    region: "{{ instance_region }}"
  with_file: ~/.ssh/{{ ssh_key }}.pub
  tags: sshkey
  when: cloud_vendor == "aws"

- name: create security group
  ec2_group:
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    name: "{{ security_group }}"
    description: "{{ security_group }}"
    vpc_id: "{{ vpc }}"
    region: "{{ instance_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8443
        to_port: 8443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 9000
        to_port: 9000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 5901
        to_port: 5901
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 636
        to_port: 636
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 389
        to_port: 389
        cidr_ip: 0.0.0.0/0
  tags: securitygroup
  when: cloud_vendor == "aws"

- name: launch instance
  ec2:
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    group: "{{ security_group }}"
    image: "{{ starting_image }}"
    key_name: "{{ ssh_key }}"
    instance_type: "{{ instance_type }}"
    region: "{{ instance_region }}"
    wait: yes
    count_tag:
        TrackingTag: "{{ tracking_tag }}"
    instance_tags:
        TrackingTag: "{{ tracking_tag }}"
    exact_count: 1
    volumes:
      - device_name: /dev/sda1
        volume_size: 100
  register: ec2
  when: cloud_vendor == "aws"
  tags: provisioninstance
- name: Wait for SSH to come up
  wait_for:
       host: "{{ item.public_dns_name }}"
       port: 22
       delay: 60
       timeout: 320
       state: started
  with_items: "{{ ec2.instances }}"
  when: cloud_vendor == "aws"
  tags: provisioninstance
